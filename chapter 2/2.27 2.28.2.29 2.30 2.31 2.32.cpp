//指向常量的指针，const int * p = &a;其实这里可以理解为从有右往左看就是一个指针类型指向类型为double的变量，将变量设置成const，所以我们不能修改它的值，但可以改变指针的指向
//而int * const p = &a;可以理解为p是一个常量的指针类型指向int类型，所以指针不能被修改，但是指向的值是可以改变的
//换个角度思考，常量指针就是说这个指针类型的变量必须一直指向某一块确定的内存区域，无论地址里的值怎么被改变，而指针常量则是那个值不能被改变，但是他在哪块内存区域都无所谓
//这一部分非常重要!!!一定要彻底理解

//2.27（a）非法，引用不能引用字面值（b）合法 （c）非法，理由同A，（d）合法 
// （e） 合法 （f）非法，必须初始化，另外const只能作用于对象 （g）合法 
//引用（Reference）在 C++ 中通常要求必须绑定到一个左值（lvalue），即一个具有明确存储地址的对象。普通引用（non-const reference）不可以绑定到一个右值（rvalue），例如临时对象或字面值，因为这些右值通常没有明确的存储地址或不允许被修改。
//然而，常量引用（const reference）是一个例外，它可以绑定到右值，原因在于，常量引用绑定到右值时会生成一个临时对象来存储这个右值。这样，常量引用就有了一个实际对象来绑定，而且不会改变该对象的值。这个特性使得常量引用更为灵活和实用。


//2.28(a)int类型变量i，常量指针cp，意思是它只能改变该值，不能改变地址即指向。
//（b）p1是指针类型，p2和cp是一样的，
//（c）ic是一个常量int类型，r是一个常量引用指它引用的值不可更改
//（d）p3是指向常量指针的常量，就是说它地址和值都不能更改
//(e)p是指针常量，指的是值不能变，但是地址是可以改变的，即可以改变指向
//其中a，b，c，d都不合法，因为常量值，const指针都需要初始化，而常量一个指针指向的值不需要
//是否需要初始化取决于这个值自己是不是被声明成常量，
//2.29 a 合法   b 不合法  c 不合法 d 合法 e 合法 f  合法


//这里有一些具体的规则：
//常量：必须在声明时初始化。
//常量指针（int* const p）：必须在声明时初始化，因为它的值（即地址）后来不能更改。
//指向常量的指针（const int* p）：可以在声明时不初始化，因为它可以改变它的值（即所指向的地址）。
//常量引用：必须在声明时初始化，因为它后来不能绑定到另一个对象。
//普通变量和指针：可以在声明时不初始化，但使用前必须赋值，否则会导致未定义的行为。


//i = ic; // 合法, 常量 ic 赋值给普通变量 i。

//p1 = p3; // 不合法，因为 p3 是 const int *const 类型，它是一个指向常量的常量指针，不能赋值给普通指针 p1。
//
//p1 = &ic; // 不合法，因为 &ic 是常量的地址，不能赋值给指向非常量的指针 p1。
//
//p3 = &ic; // 这也是不合法的。p3 是一个指向常量的常量指针，因此不能更改其所存储的地址。
//
//p2 = p1; // 这也是不合法的。p2 是一个 int *const 类型的常量指针，不能更改其所存储的地址。
//
//ic = *p3; // 这是不合法的。ic 是常量，不能被赋值。
//
//所以，根据变量、指针和常量的性质，这段代码中的大多数语句都是不合法的。常量一旦初始化后，其值不能再改变，常量指针不能更改其存储的地址，普通指针不能指向常量。

//初始化和赋值时，对于指针变量来说，你可以将非常量对象的地址赋给指向常量的指针。这是因为，将非常量对象的地址赋给指向常量的指针并不会破坏类型安全，因为你无法通过这个指针修改所指对象的值。但是，你不能将常量对象的地址赋给一个普通的、非常量的指针，因为这样就有可能通过这个普通指针来修改常量的值。


//2.30 a 顶层const  b 底层 ，因为p2的值是可以改变的 c p3是顶层const 
// 
// a 合法，顶层const不受影响可以拷贝    b   前面非法，底层const必须有同为const的类型才能拷贝操作，后面合法，这里注意非常量可以转换成常量，反之不行
//c 前面不行，后面可以，因为p3即是顶层也是底层，所以要注意底层


//常量表达式是指值不会改变并且在编译过程中就能得到计算结果

//比如说const int sz = get_size()不是常量表达式，主要是因为后面这个函数要在运行时才知道值是多少


//复杂程序中很难判断是不是常量表达式，所以使用constexpr来验证

//字面值类型 指算数类型，引用，指针等，而string io库，类都不属于，
// 而且指针和引用的初始值被严格限制，必须为0和NULLPTR，或者是某个固定地址中的对象
//2.32 非法 指针不能赋值为0，只能初始化为0