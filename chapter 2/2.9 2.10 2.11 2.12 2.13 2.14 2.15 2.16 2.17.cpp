//初始化和赋值是完全不同的操作
//初始化的含义是创建变量时赋予某一个初始值，而赋值的含义是把对象的当前值擦除，以新值作为替代
// 列表初始化，如果值有丢失风险会被拒绝
//默认初始化，内置类型未被显示初始化，定义由位置决定，函数体外则定义为0。某些情况下，函数体内的内置类型可能不被初始化
//所以可能会因为未定义而引发错误
//初始化和赋值的一个区别是初始化一定会带着对象类型

//类由类中实现决定
//2.9（a）应该先定义（b）非法，编译器拒绝丢失风险使用列表初始化(c)wage未被定义所以不能赋值(d)合法
//2.10 global_int是0，global_str是空字符串，local_str是空字符串，local_int是在函数内部所以是未定义的

//分离式编译指将程序分为若干个文件，每个文件都可独立编译
//而为了支持这种编译。需要将声明和定义区分开，声明是使名字被程序所知道，定义负责创建实体
//声明可以使用extern，并且如果为extern初始化则变成定义了，在函数体内部不允许定义extern的变量

//变量只能被定义一次，但可以声明很多次

//2.11 （a）定义（b）定义（c）声明
//C++是静态类型语言，在编译阶段检查类型，编译器可以查看该数据类型是否支持要进行的运算。但前提是我们必须声明该类型、
//int a = 10; 这一行代码做了三件事：
//
//声明：声明了一个名为a的变量，并指定其类型为int。
//定义：定义了变量a，也就是为它分配了存储空间。
//初始化：为变量a赋了一个初始值10。

//标识符由字母，数字和下划线组成

//2.12 （a）非法(b)合法(c)非法(d)非法，出现连续两个_(e)合法

//作用域分为全局作用域和块作用域，并且可以嵌套，嵌套作用域分为内层作用域和外层作用域
//2.13 100，因为在内层作用域中
//2.14 100 45


//复合类型
# include<iostream>
int main()
{


}